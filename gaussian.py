# I got the filter from ttps://observablehq.com/@jobleonard/gaussian-kernel-calculater-2d
# The settings used included a kernel radius = 5, σ = 2, μ = 0, Zoom = 11, Height Scale = 40
from PIL import Image

kernel = [[14.015972616924142, 14.72001322567962, 15.201216170882606, 15.436046595152218, 15.412644338262325, 15.132248836898258, 14.608874963788784, 13.868039188384742, 12.944881100660975, 11.881358414678505, 10.72307950758965, 9.516091135239975, 8.30392399747188, 7.125146111292929, 6.011594289246574],
[14.72001322567962, 15.459418713657126, 15.964793111226294, 16.211419374384562, 16.186841591568832, 15.892361457987782, 15.34269783173012, 14.564648907830518, 13.595119383758925, 12.478174564348466, 11.261713795098238, 9.994096820534844, 8.721040944402839, 7.483051505572107, 6.313564521257553],
[15.201216170882606, 15.964793111226294, 16.48668839398843, 16.741376965405305, 16.71599572533066, 16.41188892189474, 15.844256578369574, 15.040772933185934, 14.039549112696822, 12.886090933652156, 11.629863589745193, 10.320807724319591, 9.006135157522253, 7.727675363470897, 6.51995739575974],
[15.436046595152218, 16.211419374384562, 16.741376965405305, 17, 16.974226667127763, 16.665421981044076, 16.08902077701718, 15.273124808821283, 14.256433948595921, 13.085156993045652, 11.80952328080391, 10.48024494496444, 9.14526314019784, 7.847053527942872, 6.620678571240343],
[15.412644338262325, 16.186841591568832, 16.71599572533066, 16.974226667127763, 16.948492408648903, 16.640155894680916, 16.06462856007163, 15.249969554133225, 14.234820076964851, 13.065318869112286, 11.791619117593406, 10.464356071932135, 9.131398204249809, 7.835156779552172, 6.610641103437011],
[15.132248836898258, 15.892361457987782, 16.41188892189474, 16.665421981044076, 16.640155894680916, 16.33742881213336, 15.772371794751585, 14.972533524009402, 13.975852217543148, 12.827627233959742, 11.57709934526831, 10.273982616031555, 8.965274668181486, 7.692615197118155, 6.490376599445665],
[14.608874963788784, 15.34269783173012, 15.844256578369574, 16.08902077701718, 16.06462856007163, 15.772371794751585, 15.226858209605323, 14.454683669358948, 13.492474235596049, 12.383962513626066, 11.176686201854247, 9.918639921633066, 8.655195804348965, 7.426553367614049, 6.265896181802253],
[13.868039188384742, 14.564648907830518, 15.040772933185934, 15.273124808821283, 15.249969554133225, 14.972533524009402, 14.454683669358948, 13.721667142696006, 12.808252648566018, 11.755955052812167, 10.609901352964629, 9.415652298321188, 8.21627913822085, 7.049942818457227, 5.948144125743665],
[12.944881100660975, 13.595119383758925, 14.039549112696822, 14.256433948595921, 14.234820076964851, 13.975852217543148, 13.492474235596049, 12.808252648566018, 11.955641701804606, 10.973392728139022, 9.903628742187458, 8.788877636646578, 7.669343523574084, 6.580647077189068, 5.552192161516023],
[11.881358414678505, 12.478174564348466, 12.886090933652156, 13.085156993045652, 13.065318869112286, 12.827627233959742, 12.383962513626066, 11.755955052812167, 10.973392728139022, 10.071843148979502, 9.089968596608632, 8.066802966496045, 7.039247290129554, 6.039995726233249, 5.09603638265724],
[10.72307950758965, 11.261713795098238, 11.629863589745193, 11.80952328080391, 11.791619117593406, 11.57709934526831, 11.176686201854247, 10.609901352964629, 9.903628742187458, 9.089968596608632, 8.203814124697033, 7.280393921534414, 6.353011644896722, 5.451174195526813, 4.599238689516612],
[9.516091135239975, 9.994096820534844, 10.320807724319591, 10.48024494496444, 10.464356071932135, 10.273982616031555, 9.918639921633066, 9.415652298321188, 8.788877636646578, 8.066802966496045, 7.280393921534414, 6.460913770967804, 5.637917517378119, 4.837590768769921, 4.0815490075574115],
[8.30392399747188, 8.721040944402839, 9.006135157522253, 9.14526314019784, 9.131398204249809, 8.965274668181486, 8.655195804348965, 8.21627913822085, 7.669343523574084, 7.039247290129554, 6.353011644896722, 5.637917517378119, 4.919755170791839, 4.221374669897375, 3.561638100038942],
[7.125146111292929, 7.483051505572107, 7.727675363470897, 7.847053527942872, 7.835156779552172, 7.692615197118155, 7.426553367614049, 7.049942818457227, 6.580647077189068, 6.039995726233249, 5.451174195526813, 4.837590768769921, 4.221374669897375, 3.622132298258864, 3.056048184695724],
[6.011594289246574, 6.313564521257553, 6.51995739575974, 6.620678571240343, 6.610641103437011, 6.490376599445665, 6.265896181802253, 5.948144125743665, 5.552192161516023, 5.09603638265724, 4.599238689516612, 4.0815490075574115, 3.561638100038942, 3.056048184695724, 2.578434396687122]]

# import the image
img = Image.open("sampleimages/lena30.jpg")
pix = img.load()

# obtain the size of images in pixels
width, height = img.size

offset = int(len(kernel) / 2)

# iterate over each pixel starting in the middle of the kernel
# onwards to the end of the image minus offset
# and for each pixel get the sum of the neighboring pixels
# rbg values and multiply by the associated filter
for y in range(offset, height - offset):
    for x in range(offset, width - offset):
        values = [0,0,0]
        for kernelX in range(len(kernel)):
            for kernelY in range(len(kernel)):
                newPxl = pix[x+kernelX-offset, y+kernelY-offset]
                values[0] += newPxl[0] * (1/kernel[kernelX][kernelY])
                values[1] += newPxl[1] * (1/kernel[kernelX][kernelY])
                values[2] += newPxl[2] * (1/kernel[kernelX][kernelY])
    pix[x, y] = (int(values[0]), int(values[1]), int(values[2]))

img.show()
img.save("outputImages/gaussian.jpg")